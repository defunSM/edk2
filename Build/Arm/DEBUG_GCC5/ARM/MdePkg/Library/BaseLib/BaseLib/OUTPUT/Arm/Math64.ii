# 1 "/home/xephyr/Documents/edk2/MdePkg/Library/BaseLib/Arm/Math64.S"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/xephyr/Documents/edk2/BaseTools/Bin/gcc_arm_linux_extdep/arm-linux-gnueabihf/libc/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h" 1
# 16 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 1
# 22 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h" 1
# 101 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h"
  typedef unsigned long long UINT64;
  typedef long long INT64;
  typedef unsigned int UINT32;
  typedef int INT32;
  typedef unsigned short UINT16;
  typedef unsigned short CHAR16;
  typedef short INT16;
  typedef unsigned char BOOLEAN;
  typedef unsigned char UINT8;
  typedef char CHAR8;
  typedef signed char INT8;






typedef UINT32 UINTN;





typedef INT32 INTN;
# 23 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 2
# 222 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 657 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef __builtin_va_list VA_LIST;
# 742 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 813 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");
# 834 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyUint32EnumValue = 0xffffffff
} __VERIFY_UINT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h" 2
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 845 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdSetSku (
  UINTN SkuId
  );
# 862 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGet8 (
  UINTN TokenNumber
  );
# 879 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGet16 (
  UINTN TokenNumber
  );
# 896 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGet32 (
  UINTN TokenNumber
  );
# 913 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGet64 (
  UINTN TokenNumber
  );
# 930 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetPtr (
  UINTN TokenNumber
  );
# 947 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetBool (
  UINTN TokenNumber
  );
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSize (
  UINTN TokenNumber
  );
# 983 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1005 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1024 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1046 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1068 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1090 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1112 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1132 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1151 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1170 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1189 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1218 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1238 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1261 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1285 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1309 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1333 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1363 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1388 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1412 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
( *PCD_CALLBACK)(
  const GUID *CallBackGuid,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1438 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCallbackOnSet (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1460 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCancelCallback (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1488 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetNextToken (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1510 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *

LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1540 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1572 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1606 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1641 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1693 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1713 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1728 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSku (
  void
  );
# 18 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern GUID gEfiMdePkgTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const BOOLEAN _gPcd_FixedAtBuild_PcdVerifyNodeInList;



extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumLinkedListLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumAsciiStringLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumUnicodeStringLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdControlFlowEnforcementPropertyMask;






extern const UINT8 _gPcd_FixedAtBuild_PcdSpeculationBarrierType;
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/MdePkg/Library/BaseLib/Arm/Math64.S"
#------------------------------------------------------------------------------

# Replacement for Math64.c that is coded to use older GCC intrinsics.
# Doing this reduces the number of intrinsics that are required when
# you port to a new version of gcc.

# Need to split this into multple files to size optimize the image.

# Copyright (c) 2009 - 2010, Apple Inc. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent

#------------------------------------------------------------------------------

  .text
  .align 2
  .global InternalMathLShiftU64 ; .type InternalMathLShiftU64, %function

InternalMathLShiftU64:
  stmfd sp!, {r4, r5, r6}
  mov r6, r1
  rsb ip, r2, #32
  mov r4, r6, asl r2
  subs r1, r2, #32
  orr r4, r4, r0, lsr ip
  mov r3, r0, asl r2
  movpl r4, r0, asl r1
  mov r5, r0
  mov r0, r3
  mov r1, r4
  ldmfd sp!, {r4, r5, r6}
  bx lr

  .align 2
  .global InternalMathRShiftU64 ; .type InternalMathRShiftU64, %function

InternalMathRShiftU64:
  stmfd sp!, {r4, r5, r6}
  mov r5, r0
  rsb ip, r2, #32
  mov r3, r5, lsr r2
  subs r0, r2, #32
  orr r3, r3, r1, asl ip
  mov r4, r1, lsr r2
  movpl r3, r1, lsr r0
  mov r6, r1
  mov r0, r3
  mov r1, r4
  ldmfd sp!, {r4, r5, r6}
  bx lr

  .align 2
  .global InternalMathARShiftU64 ; .type InternalMathARShiftU64, %function

InternalMathARShiftU64:
  stmfd sp!, {r4, r5, r6}
  mov r5, r0
  rsb ip, r2, #32
  mov r3, r5, lsr r2
  subs r0, r2, #32
  orr r3, r3, r1, asl ip
  mov r4, r1, asr r2
  movpl r3, r1, asr r0
  mov r6, r1
  mov r0, r3
  mov r1, r4
  ldmfd sp!, {r4, r5, r6}
  bx lr

  .align 2
  .global InternalMathLRotU64 ; .type InternalMathLRotU64, %function

InternalMathLRotU64:
  stmfd sp!, {r4, r5, r6, r7, lr}
  add r7, sp, #12
  mov r6, r1
  rsb ip, r2, #32
  mov r4, r6, asl r2
  rsb lr, r2, #64
  subs r1, r2, #32
  orr r4, r4, r0, lsr ip
  mov r3, r0, asl r2
  movpl r4, r0, asl r1
  sub ip, r2, #32
  mov r5, r0
  mov r0, r0, lsr lr
  rsbs r2, r2, #32
  orr r0, r0, r6, asl ip
  mov r1, r6, lsr lr
  movpl r0, r6, lsr r2
  orr r1, r1, r4
  orr r0, r0, r3
  ldmfd sp!, {r4, r5, r6, r7, pc}


  .align 2
  .global InternalMathRRotU64 ; .type InternalMathRRotU64, %function

InternalMathRRotU64:
  stmfd sp!, {r4, r5, r6, r7, lr}
  add r7, sp, #12
  mov r5, r0
  rsb ip, r2, #32
  mov r3, r5, lsr r2
  rsb lr, r2, #64
  subs r0, r2, #32
  orr r3, r3, r1, asl ip
  mov r4, r1, lsr r2
  movpl r3, r1, lsr r0
  sub ip, r2, #32
  mov r6, r1
  mov r1, r1, asl lr
  rsbs r2, r2, #32
  orr r1, r1, r5, lsr ip
  mov r0, r5, asl lr
  movpl r1, r5, asl r2
  orr r0, r0, r3
  orr r1, r1, r4
  ldmfd sp!, {r4, r5, r6, r7, pc}

  .align 2
  .global InternalMathMultU64x32 ; .type InternalMathMultU64x32, %function

InternalMathMultU64x32:
  stmfd sp!, {r7, lr}
  add r7, sp, #0
  mov r3, #0
  mov ip, r0
  mov lr, r1
  umull r0, r1, ip, r2
  mla r1, lr, r2, r1
  mla r1, ip, r3, r1
  ldmfd sp!, {r7, pc}

  .align 2
  .global InternalMathMultU64x64 ; .type InternalMathMultU64x64, %function

InternalMathMultU64x64:
  stmfd sp!, {r7, lr}
  add r7, sp, #0
  mov ip, r0
  mov lr, r1
  umull r0, r1, ip, r2
  mla r1, lr, r2, r1
  mla r1, ip, r3, r1
  ldmfd sp!, {r7, pc}

  .align 2
  .global InternalMathDivU64x32 ; .type InternalMathDivU64x32, %function

InternalMathDivU64x32:
  stmfd sp!, {r7, lr}
  add r7, sp, #0
  mov r3, #0
  bl __udivdi3
  ldmfd sp!, {r7, pc}


  .align 2
  .global InternalMathModU64x32 ; .type InternalMathModU64x32, %function

InternalMathModU64x32:
  stmfd sp!, {r7, lr}
  add r7, sp, #0
  mov r3, #0
  bl __umoddi3
  ldmfd sp!, {r7, pc}


  .align 2
  .global InternalMathDivRemU64x32 ; .type InternalMathDivRemU64x32, %function

InternalMathDivRemU64x32:
  stmfd sp!, {r4, r5, r6, r7, lr}
  add r7, sp, #12
  stmfd sp!, {r10, r11}
  subs r6, r3, #0
  mov r10, r0
  mov r11, r1
  moveq r4, r2
  moveq r5, #0
  beq L22
  mov r4, r2
  mov r5, #0
  mov r3, #0
  bl __umoddi3
  str r0, [r6, #0]
L22:
  mov r0, r10
  mov r1, r11
  mov r2, r4
  mov r3, r5
  bl __udivdi3
  ldmfd sp!, {r10, r11}
  ldmfd sp!, {r4, r5, r6, r7, pc}


  .align 2
  .global InternalMathDivRemU64x64 ; .type InternalMathDivRemU64x64, %function

InternalMathDivRemU64x64:
  stmfd sp!, {r4, r5, r6, r7, lr}
  add r7, sp, #12
  stmfd sp!, {r10, r11}
  ldr r6, [sp, #28]
  mov r4, r0
  cmp r6, #0
  mov r5, r1
  mov r10, r2
  mov r11, r3
  beq L26
  bl __umoddi3
  stmia r6, {r0-r1}
L26:
  mov r0, r4
  mov r1, r5
  mov r2, r10
  mov r3, r11
  bl __udivdi3
  ldmfd sp!, {r10, r11}
  ldmfd sp!, {r4, r5, r6, r7, pc}


  .align 2
  .global InternalMathDivRemS64x64 ; .type InternalMathDivRemS64x64, %function

InternalMathDivRemS64x64:
  stmfd sp!, {r4, r5, r6, r7, lr}
  add r7, sp, #12
  stmfd sp!, {r10, r11}
  ldr r6, [sp, #28]
  mov r4, r0
  cmp r6, #0
  mov r5, r1
  mov r10, r2
  mov r11, r3
  beq L30
  bl __moddi3
  stmia r6, {r0-r1}
L30:
  mov r0, r4
  mov r1, r5
  mov r2, r10
  mov r3, r11
  bl __divdi3
  ldmfd sp!, {r10, r11}
  ldmfd sp!, {r4, r5, r6, r7, pc}


  .align 2
  .global InternalMathSwapBytes64 ; .type InternalMathSwapBytes64, %function

InternalMathSwapBytes64:
  stmfd sp!, {r4, r5, r7, lr}
  mov r5, r1
  bl SwapBytes32
  mov r4, r0
  mov r0, r5
  bl SwapBytes32
  mov r1, r4
  ldmfd sp!, {r4, r5, r7, pc}



