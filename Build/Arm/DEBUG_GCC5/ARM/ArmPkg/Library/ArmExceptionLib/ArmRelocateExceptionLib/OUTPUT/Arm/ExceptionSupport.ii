# 1 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmExceptionLib/Arm/ExceptionSupport.S"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/xephyr/Documents/edk2/BaseTools/Bin/gcc_arm_linux_extdep/arm-linux-gnueabihf/libc/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmExceptionLib/ArmRelocateExceptionLib/DEBUG/AutoGen.h" 1
# 16 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmExceptionLib/ArmRelocateExceptionLib/DEBUG/AutoGen.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 1
# 22 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h" 1
# 101 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h"
  typedef unsigned long long UINT64;
  typedef long long INT64;
  typedef unsigned int UINT32;
  typedef int INT32;
  typedef unsigned short UINT16;
  typedef unsigned short CHAR16;
  typedef short INT16;
  typedef unsigned char BOOLEAN;
  typedef unsigned char UINT8;
  typedef char CHAR8;
  typedef signed char INT8;






typedef UINT32 UINTN;





typedef INT32 INTN;
# 23 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 2
# 222 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 657 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef __builtin_va_list VA_LIST;
# 742 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 813 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");
# 834 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyUint32EnumValue = 0xffffffff
} __VERIFY_UINT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmExceptionLib/ArmRelocateExceptionLib/DEBUG/AutoGen.h" 2
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 845 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdSetSku (
  UINTN SkuId
  );
# 862 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGet8 (
  UINTN TokenNumber
  );
# 879 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGet16 (
  UINTN TokenNumber
  );
# 896 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGet32 (
  UINTN TokenNumber
  );
# 913 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGet64 (
  UINTN TokenNumber
  );
# 930 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetPtr (
  UINTN TokenNumber
  );
# 947 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetBool (
  UINTN TokenNumber
  );
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSize (
  UINTN TokenNumber
  );
# 983 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1005 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1024 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1046 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1068 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1090 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1112 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1132 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1151 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1170 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1189 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1218 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1238 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1261 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1285 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1309 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1333 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1363 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1388 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1412 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
( *PCD_CALLBACK)(
  const GUID *CallBackGuid,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1438 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCallbackOnSet (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1460 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCancelCallback (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1488 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetNextToken (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1510 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *

LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1540 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1572 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1606 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1641 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1693 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1713 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1728 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSku (
  void
  );
# 18 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmExceptionLib/ArmRelocateExceptionLib/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern GUID gArmTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const BOOLEAN _gPcd_FixedAtBuild_PcdDebuggerExceptionSupport;



extern const UINT64 _gPcd_FixedAtBuild_PcdCpuVectorBaseAddress;
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmExceptionLib/Arm/ExceptionSupport.S"
#------------------------------------------------------------------------------

# Use ARMv6 instruction to operate on a single stack

# Copyright (c) 2008 - 2010, Apple Inc. All rights reserved.<BR>
# Copyright (c) 2014, ARM Limited. All rights reserved.<BR>
# Copyright (c) 2016 HP Development Company, L.P.<BR>

# SPDX-License-Identifier: BSD-2-Clause-Patent

#------------------------------------------------------------------------------
# 51 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmExceptionLib/Arm/ExceptionSupport.S"
.global ExceptionHandlersStart ; .type ExceptionHandlersStart, %function
.global ExceptionHandlersEnd ; .type ExceptionHandlersEnd, %function
.global CommonExceptionEntry ; .type CommonExceptionEntry, %function
.global AsmCommonExceptionEntry ; .type AsmCommonExceptionEntry, %function
.global CommonCExceptionHandler ; .type CommonCExceptionHandler, %function

.text
.syntax unified

.fpu neon @ makes vpush/vpop assemble

.align 5






ExceptionHandlersStart:

Reset:
  b ResetEntry

UndefinedInstruction:
  b UndefinedInstructionEntry

SoftwareInterrupt:
  b SoftwareInterruptEntry

PrefetchAbort:
  b PrefetchAbortEntry

DataAbort:
  b DataAbortEntry

ReservedException:
  b ReservedExceptionEntry

Irq:
  b IrqEntry

Fiq:
  b FiqEntry

ResetEntry:
  srsdb #0x13! @ Store return state on SVC stack
                                      @ We are already in SVC mode

  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state

  mov R0,#0 @ ExceptionType
  ldr R1,CommonExceptionEntry
  bx R1

UndefinedInstructionEntry:
  sub LR, LR, #4 @ Only -2 for Thumb, adjust in CommonExceptionEntry
  srsdb #0x13! @ Store return state on SVC stack
  cps #0x13 @ Switch to SVC for common stack
  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state

  mov R0,#1 @ ExceptionType
  ldr R1,CommonExceptionEntry
  bx R1

SoftwareInterruptEntry:
  srsdb #0x13! @ Store return state on SVC stack
                                      @ We are already in SVC mode
  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state

  mov R0,#2 @ ExceptionType
  ldr R1,CommonExceptionEntry
  bx R1

PrefetchAbortEntry:
  sub LR,LR,#4
  srsdb #0x13! @ Store return state on SVC stack
  cps #0x13 @ Switch to SVC for common stack
  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state

  mov R0,#3 @ ExceptionType
  ldr R1,CommonExceptionEntry
  bx R1

DataAbortEntry:
  sub LR,LR,#8
  srsdb #0x13! @ Store return state on SVC stack
  cps #0x13 @ Switch to SVC for common stack
  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state

  mov R0,#4
  ldr R1,CommonExceptionEntry
  bx R1

ReservedExceptionEntry:
  srsdb #0x13! @ Store return state on SVC stack
  cps #0x13 @ Switch to SVC for common stack
  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state

  mov R0,#5
  ldr R1,CommonExceptionEntry
  bx R1

IrqEntry:
  sub LR,LR,#4
  srsdb #0x13! @ Store return state on SVC stack
  cps #0x13 @ Switch to SVC for common stack
  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state

  mov R0,#6 @ ExceptionType
  ldr R1,CommonExceptionEntry
  bx R1

FiqEntry:
  sub LR,LR,#4
  srsdb #0x13! @ Store return state on SVC stack
  cps #0x13 @ Switch to SVC for common stack
  stmfd SP!,{LR} @ Store the link register for the current mode
  sub SP,SP,#0x20 @ Save space for SP, LR, PC, IFAR - CPSR
  stmfd SP!,{R0-R12} @ Store the register state
                                      @ Since we have already switch to SVC R8_fiq - R12_fiq
                                      @ never get used or saved
  mov R0,#7 @ ExceptionType
  ldr R1,CommonExceptionEntry
  bx R1




CommonExceptionEntry:
  .word AsmCommonExceptionEntry

ExceptionHandlersEnd:





AsmCommonExceptionEntry:
  mrc p15, 0, R1, c6, c0, 2 @ Read IFAR
  str R1, [SP, #0x50] @ Store it in EFI_SYSTEM_CONTEXT_ARM.IFAR

  mrc p15, 0, R1, c5, c0, 1 @ Read IFSR
  str R1, [SP, #0x4c] @ Store it in EFI_SYSTEM_CONTEXT_ARM.IFSR

  mrc p15, 0, R1, c6, c0, 0 @ Read DFAR
  str R1, [SP, #0x48] @ Store it in EFI_SYSTEM_CONTEXT_ARM.DFAR

  mrc p15, 0, R1, c5, c0, 0 @ Read DFSR
  str R1, [SP, #0x44] @ Store it in EFI_SYSTEM_CONTEXT_ARM.DFSR

  ldr R1, [SP, #0x5c] @ srsdb saved pre-exception CPSR on the stack
  str R1, [SP, #0x40] @ Store it in EFI_SYSTEM_CONTEXT_ARM.CPSR

  add R2, SP, #0x38 @ Make R2 point to EFI_SYSTEM_CONTEXT_ARM.LR
  and R3, R1, #0x1f @ Check CPSR to see if User or System Mode
  cmp R3, #0x1f @ if ((CPSR == 0x10) || (CPSR == 0x1f))
  cmpne R3, #0x10 @
  stmdaeq R2, {lr}^ @ save unbanked lr
                                    @ else
  stmdane R2, {lr} @ save SVC lr


  ldr R5, [SP, #0x58] @ PC is the LR pushed by srsfd
                                    @ Check to see if we have to adjust for Thumb entry
  sub r4, r0, #1 @ if (ExceptionType == 1 || ExceptionType == 2)) {
  cmp r4, #1 @
  bhi NoAdjustNeeded

  tst r1, #0x20 @ if ((CPSR & T)) == T) {
  addne R5, R5, #2 @ PC += 2;
  strne R5,[SP,#0x58] @ Update LR value pushed by srsfd

NoAdjustNeeded:

  str R5, [SP, #0x3c] @ Store it in EFI_SYSTEM_CONTEXT_ARM.PC

  add R1, SP, #0x60 @ We pushed 0x60 bytes on the stack
  str R1, [SP, #0x34] @ Store it in EFI_SYSTEM_CONTEXT_ARM.SP

                                    @ R0 is ExceptionType
  mov R1,SP @ R1 is SystemContext





  mov R4, SP @ Save current SP
  tst R4, #4
  subne SP, SP, #4 @ Adjust SP if not 8-byte aligned
# 264 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmExceptionLib/Arm/ExceptionSupport.S"
  blx CommonCExceptionHandler @ Call exception handler

  mov SP, R4 @ Restore SP





  ldr R1, [SP, #0x4c] @ Restore EFI_SYSTEM_CONTEXT_ARM.IFSR
  mcr p15, 0, R1, c5, c0, 1 @ Write IFSR

  ldr R1, [SP, #0x44] @ Restore EFI_SYSTEM_CONTEXT_ARM.DFSR
  mcr p15, 0, R1, c5, c0, 0 @ Write DFSR

  ldr R1,[SP,#0x3c] @ EFI_SYSTEM_CONTEXT_ARM.PC
  str R1,[SP,#0x58] @ Store it back to srsfd stack slot so it can be restored

  ldr R1,[SP,#0x40] @ EFI_SYSTEM_CONTEXT_ARM.CPSR
  str R1,[SP,#0x5c] @ Store it back to srsfd stack slot so it can be restored

  add R3, SP, #0x54 @ Make R3 point to SVC LR saved on entry
  add R2, SP, #0x38 @ Make R2 point to EFI_SYSTEM_CONTEXT_ARM.LR
  and R1, R1, #0x1f @ Check to see if User or System Mode
  cmp R1, #0x1f @ if ((CPSR == 0x10) || (CPSR == 0x1f))
  cmpne R1, #0x10 @
  ldmibeq R2, {lr}^ @ restore unbanked lr
                                    @ else
  ldmibne R3, {lr} @ restore SVC lr, via ldmfd SP!, {LR}

  ldmfd SP!,{R0-R12} @ Restore general purpose registers
                                    @ Exception handler can not change SP

  add SP,SP,#0x20 @ Clear out the remaining stack space
  ldmfd SP!,{LR} @ restore the link register for this context
  rfefd SP! @ return from exception via srsfd stack slot
