# 1 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmLib/Arm/ArmV7Support.S"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/xephyr/Documents/edk2/BaseTools/Bin/gcc_arm_linux_extdep/arm-linux-gnueabihf/libc/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/Build/ArmPlatform/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h" 1
# 16 "/home/xephyr/Documents/edk2/Build/ArmPlatform/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 1
# 22 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h" 1
# 101 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h"
  typedef unsigned long long UINT64;
  typedef long long INT64;
  typedef unsigned int UINT32;
  typedef int INT32;
  typedef unsigned short UINT16;
  typedef unsigned short CHAR16;
  typedef short INT16;
  typedef unsigned char BOOLEAN;
  typedef unsigned char UINT8;
  typedef char CHAR8;
  typedef signed char INT8;






typedef UINT32 UINTN;





typedef INT32 INTN;
# 23 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 2
# 222 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 657 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef __builtin_va_list VA_LIST;
# 742 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 813 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");
# 834 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyUint32EnumValue = 0xffffffff
} __VERIFY_UINT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/xephyr/Documents/edk2/Build/ArmPlatform/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h" 2
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 845 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdSetSku (
  UINTN SkuId
  );
# 862 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGet8 (
  UINTN TokenNumber
  );
# 879 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGet16 (
  UINTN TokenNumber
  );
# 896 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGet32 (
  UINTN TokenNumber
  );
# 913 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGet64 (
  UINTN TokenNumber
  );
# 930 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetPtr (
  UINTN TokenNumber
  );
# 947 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetBool (
  UINTN TokenNumber
  );
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSize (
  UINTN TokenNumber
  );
# 983 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1005 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1024 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1046 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1068 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1090 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1112 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1132 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1151 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1170 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1189 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1218 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1238 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1261 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1285 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1309 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1333 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1363 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1388 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1412 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
( *PCD_CALLBACK)(
  const GUID *CallBackGuid,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1438 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCallbackOnSet (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1460 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCancelCallback (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1488 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetNextToken (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1510 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *

LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1540 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1572 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1606 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1641 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1693 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1713 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1728 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSku (
  void
  );
# 18 "/home/xephyr/Documents/edk2/Build/ArmPlatform/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern GUID gArmTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const BOOLEAN _gPcd_FixedAtBuild_PcdNormalMemoryNonshareableOverride;
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmLib/Arm/ArmV7Support.S"
#------------------------------------------------------------------------------

# Copyright (c) 2008 - 2010, Apple Inc. All rights reserved.<BR>
# Copyright (c) 2011 - 2014, ARM Limited. All rights reserved.
# Copyright (c) 2016, Linaro Limited. All rights reserved.

# SPDX-License-Identifier: BSD-2-Clause-Patent

#------------------------------------------------------------------------------

# 1 "/home/xephyr/Documents/edk2/ArmPkg/Include/AsmMacroIoLib.h" 1
# 12 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmLib/Arm/ArmV7Support.S" 2

.set DC_ON, (0x1<<2)
.set IC_ON, (0x1<<12)
.set CTRL_M_BIT, (1 << 0)
.set CTRL_C_BIT, (1 << 2)
.set CTRL_B_BIT, (1 << 7)
.set CTRL_I_BIT, (1 << 12)


.global ArmInvalidateDataCacheEntryByMVA ; .section ".text.ArmInvalidateDataCacheEntryByMVA", "ax" ; .type ArmInvalidateDataCacheEntryByMVA, %function ; .p2align 2 ; ArmInvalidateDataCacheEntryByMVA:
  mcr p15, 0, r0, c7, c6, 1 @invalidate single data cache line
  bx lr

.global ArmCleanDataCacheEntryByMVA ; .section ".text.ArmCleanDataCacheEntryByMVA", "ax" ; .type ArmCleanDataCacheEntryByMVA, %function ; .p2align 2 ; ArmCleanDataCacheEntryByMVA:
  mcr p15, 0, r0, c7, c10, 1 @clean single data cache line
  bx lr


.global ArmCleanDataCacheEntryToPoUByMVA ; .section ".text.ArmCleanDataCacheEntryToPoUByMVA", "ax" ; .type ArmCleanDataCacheEntryToPoUByMVA, %function ; .p2align 2 ; ArmCleanDataCacheEntryToPoUByMVA:
  mcr p15, 0, r0, c7, c11, 1 @clean single data cache line to PoU
  bx lr

.global ArmInvalidateInstructionCacheEntryToPoUByMVA ; .section ".text.ArmInvalidateInstructionCacheEntryToPoUByMVA", "ax" ; .type ArmInvalidateInstructionCacheEntryToPoUByMVA, %function ; .p2align 2 ; ArmInvalidateInstructionCacheEntryToPoUByMVA:
  mcr p15, 0, r0, c7, c5, 1 @Invalidate single instruction cache line to PoU
  mcr p15, 0, r0, c7, c5, 7 @Invalidate branch predictor
  bx lr

.global ArmCleanInvalidateDataCacheEntryByMVA ; .section ".text.ArmCleanInvalidateDataCacheEntryByMVA", "ax" ; .type ArmCleanInvalidateDataCacheEntryByMVA, %function ; .p2align 2 ; ArmCleanInvalidateDataCacheEntryByMVA:
  mcr p15, 0, r0, c7, c14, 1 @clean and invalidate single data cache line
  bx lr


.global ArmInvalidateDataCacheEntryBySetWay ; .section ".text.ArmInvalidateDataCacheEntryBySetWay", "ax" ; .type ArmInvalidateDataCacheEntryBySetWay, %function ; .p2align 2 ; ArmInvalidateDataCacheEntryBySetWay:
  mcr p15, 0, r0, c7, c6, 2 @ Invalidate this line
  bx lr


.global ArmCleanInvalidateDataCacheEntryBySetWay ; .section ".text.ArmCleanInvalidateDataCacheEntryBySetWay", "ax" ; .type ArmCleanInvalidateDataCacheEntryBySetWay, %function ; .p2align 2 ; ArmCleanInvalidateDataCacheEntryBySetWay:
  mcr p15, 0, r0, c7, c14, 2 @ Clean and Invalidate this line
  bx lr


.global ArmCleanDataCacheEntryBySetWay ; .section ".text.ArmCleanDataCacheEntryBySetWay", "ax" ; .type ArmCleanDataCacheEntryBySetWay, %function ; .p2align 2 ; ArmCleanDataCacheEntryBySetWay:
  mcr p15, 0, r0, c7, c10, 2 @ Clean this line
  bx lr

.global ArmInvalidateInstructionCache ; .section ".text.ArmInvalidateInstructionCache", "ax" ; .type ArmInvalidateInstructionCache, %function ; .p2align 2 ; ArmInvalidateInstructionCache:
  mcr p15,0,R0,c7,c5,0 @Invalidate entire instruction cache
  dsb
  isb
  bx LR

.global ArmEnableMmu ; .section ".text.ArmEnableMmu", "ax" ; .type ArmEnableMmu, %function ; .p2align 2 ; ArmEnableMmu:
  mrc p15,0,R0,c1,c0,0
  orr R0,R0,#1
  mcr p15,0,R0,c1,c0,0
  dsb
  isb
  bx LR


.global ArmDisableMmu ; .section ".text.ArmDisableMmu", "ax" ; .type ArmDisableMmu, %function ; .p2align 2 ; ArmDisableMmu:
  mrc p15,0,R0,c1,c0,0
  bic R0,R0,#1
  mcr p15,0,R0,c1,c0,0 @Disable MMU

  mcr p15,0,R0,c8,c7,0 @Invalidate TLB
  mcr p15,0,R0,c7,c5,6 @Invalidate Branch predictor array
  dsb
  isb
  bx LR

.global ArmDisableCachesAndMmu ; .section ".text.ArmDisableCachesAndMmu", "ax" ; .type ArmDisableCachesAndMmu, %function ; .p2align 2 ; ArmDisableCachesAndMmu:
  mrc p15, 0, r0, c1, c0, 0 @ Get control register
  bic r0, r0, #CTRL_M_BIT @ Disable MMU
  bic r0, r0, #CTRL_C_BIT @ Disable D Cache
  bic r0, r0, #CTRL_I_BIT @ Disable I Cache
  mcr p15, 0, r0, c1, c0, 0 @ Write control register
  dsb
  isb
  bx LR

.global ArmMmuEnabled ; .section ".text.ArmMmuEnabled", "ax" ; .type ArmMmuEnabled, %function ; .p2align 2 ; ArmMmuEnabled:
  mrc p15,0,R0,c1,c0,0
  and R0,R0,#1
  bx LR

.global ArmEnableDataCache ; .section ".text.ArmEnableDataCache", "ax" ; .type ArmEnableDataCache, %function ; .p2align 2 ; ArmEnableDataCache:
  ldr R1,=DC_ON
  mrc p15,0,R0,c1,c0,0 @Read control register configuration data
  orr R0,R0,R1 @Set C bit
  mcr p15,0,r0,c1,c0,0 @Write control register configuration data
  dsb
  isb
  bx LR

.global ArmDisableDataCache ; .section ".text.ArmDisableDataCache", "ax" ; .type ArmDisableDataCache, %function ; .p2align 2 ; ArmDisableDataCache:
  ldr R1,=DC_ON
  mrc p15,0,R0,c1,c0,0 @Read control register configuration data
  bic R0,R0,R1 @Clear C bit
  mcr p15,0,r0,c1,c0,0 @Write control register configuration data
  dsb
  isb
  bx LR

.global ArmEnableInstructionCache ; .section ".text.ArmEnableInstructionCache", "ax" ; .type ArmEnableInstructionCache, %function ; .p2align 2 ; ArmEnableInstructionCache:
  ldr R1,=IC_ON
  mrc p15,0,R0,c1,c0,0 @Read control register configuration data
  orr R0,R0,R1 @Set I bit
  mcr p15,0,r0,c1,c0,0 @Write control register configuration data
  dsb
  isb
  bx LR

.global ArmDisableInstructionCache ; .section ".text.ArmDisableInstructionCache", "ax" ; .type ArmDisableInstructionCache, %function ; .p2align 2 ; ArmDisableInstructionCache:
  ldr R1,=IC_ON
  mrc p15,0,R0,c1,c0,0 @Read control register configuration data
  bic R0,R0,R1 @Clear I bit.
  mcr p15,0,r0,c1,c0,0 @Write control register configuration data
  dsb
  isb
  bx LR

.global ArmEnableSWPInstruction ; .section ".text.ArmEnableSWPInstruction", "ax" ; .type ArmEnableSWPInstruction, %function ; .p2align 2 ; ArmEnableSWPInstruction:
  mrc p15, 0, r0, c1, c0, 0
  orr r0, r0, #0x00000400
  mcr p15, 0, r0, c1, c0, 0
  isb
  bx LR

.global ArmEnableBranchPrediction ; .section ".text.ArmEnableBranchPrediction", "ax" ; .type ArmEnableBranchPrediction, %function ; .p2align 2 ; ArmEnableBranchPrediction:
  mrc p15, 0, r0, c1, c0, 0
  orr r0, r0, #0x00000800
  mcr p15, 0, r0, c1, c0, 0
  dsb
  isb
  bx LR

.global ArmDisableBranchPrediction ; .section ".text.ArmDisableBranchPrediction", "ax" ; .type ArmDisableBranchPrediction, %function ; .p2align 2 ; ArmDisableBranchPrediction:
  mrc p15, 0, r0, c1, c0, 0
  bic r0, r0, #0x00000800
  mcr p15, 0, r0, c1, c0, 0
  dsb
  isb
  bx LR

.global ArmSetLowVectors ; .section ".text.ArmSetLowVectors", "ax" ; .type ArmSetLowVectors, %function ; .p2align 2 ; ArmSetLowVectors:
  mrc p15, 0, r0, c1, c0, 0 @ Read SCTLR into R0 (Read control register configuration data)
  bic r0, r0, #0x00002000 @ clear V bit
  mcr p15, 0, r0, c1, c0, 0 @ Write R0 into SCTLR (Write control register configuration data)
  isb
  bx LR

.global ArmSetHighVectors ; .section ".text.ArmSetHighVectors", "ax" ; .type ArmSetHighVectors, %function ; .p2align 2 ; ArmSetHighVectors:
  mrc p15, 0, r0, c1, c0, 0 @ Read SCTLR into R0 (Read control register configuration data)
  orr r0, r0, #0x00002000 @ Set V bit
  mcr p15, 0, r0, c1, c0, 0 @ Write R0 into SCTLR (Write control register configuration data)
  isb
  bx LR

.global ArmV7AllDataCachesOperation ; .section ".text.ArmV7AllDataCachesOperation", "ax" ; .type ArmV7AllDataCachesOperation, %function ; .p2align 2 ; ArmV7AllDataCachesOperation:
  stmfd SP!,{r4-r12, LR}
  mov R1, R0 @ Save Function call in R1
  mrc p15, 1, R6, c0, c0, 1 @ Read CLIDR
  ands R3, R6, #0x7000000 @ Mask out all but Level of Coherency (LoC)
  mov R3, R3, LSR #23 @ Cache level value (naturally aligned)
  beq L_Finished
  mov R10, #0

Loop1:
  add R2, R10, R10, LSR #1 @ Work out 3xcachelevel
  mov R12, R6, LSR R2 @ bottom 3 bits are the Cache type for this level
  and R12, R12, #7 @ get those 3 bits alone
  cmp R12, #2
  blt L_Skip @ no cache or only instruction cache at this level
  mcr p15, 2, R10, c0, c0, 0 @ write the Cache Size selection register (CSSELR)
  isb @ isb to sync the change to the CacheSizeID reg
  mrc p15, 1, R12, c0, c0, 0 @ reads current Cache Size ID register (CCSIDR)
  and R2, R12, #0x7 @ extract the line length field
  add R2, R2, #4 @ add 4 for the line length offset (log2 16 bytes)
@ ldr R4, =0x3FF
  mov R4, #0x400
  sub R4, R4, #1
  ands R4, R4, R12, LSR #3 @ R4 is the max number on the way size (right aligned)
  clz R5, R4 @ R5 is the bit position of the way size increment
@ ldr R7, =0x00007FFF
  mov R7, #0x00008000
  sub R7, R7, #1
  ands R7, R7, R12, LSR #13 @ R7 is the max number of the index size (right aligned)

Loop2:
  mov R9, R4 @ R9 working copy of the max way size (right aligned)

Loop3:
  orr R0, R10, R9, LSL R5 @ factor in the way number and cache number into R11
  orr R0, R0, R7, LSL R2 @ factor in the index number

  blx R1

  subs R9, R9, #1 @ decrement the way number
  bge Loop3
  subs R7, R7, #1 @ decrement the index
  bge Loop2
L_Skip:
  add R10, R10, #2 @ increment the cache number
  cmp R3, R10
  bgt Loop1

L_Finished:
  dsb
  ldmfd SP!, {r4-r12, lr}
  bx LR

.global ArmDataMemoryBarrier ; .section ".text.ArmDataMemoryBarrier", "ax" ; .type ArmDataMemoryBarrier, %function ; .p2align 2 ; ArmDataMemoryBarrier:
  dmb
  bx LR

.global ArmDataSynchronizationBarrier ; .section ".text.ArmDataSynchronizationBarrier", "ax" ; .type ArmDataSynchronizationBarrier, %function ; .p2align 2 ; ArmDataSynchronizationBarrier:
  dsb
  bx LR

.global ArmInstructionSynchronizationBarrier ; .section ".text.ArmInstructionSynchronizationBarrier", "ax" ; .type ArmInstructionSynchronizationBarrier, %function ; .p2align 2 ; ArmInstructionSynchronizationBarrier:
  isb
  bx LR

.global ArmReadVBar ; .section ".text.ArmReadVBar", "ax" ; .type ArmReadVBar, %function ; .p2align 2 ; ArmReadVBar:
  # Set the Address of the Vector Table in the VBAR register
  mrc p15, 0, r0, c12, c0, 0
  bx lr

.global ArmWriteVBar ; .section ".text.ArmWriteVBar", "ax" ; .type ArmWriteVBar, %function ; .p2align 2 ; ArmWriteVBar:
  # Set the Address of the Vector Table in the VBAR register
  mcr p15, 0, r0, c12, c0, 0
  # Ensure the SCTLR.V bit is clear
  mrc p15, 0, r0, c1, c0, 0 @ Read SCTLR into R0 (Read control register configuration data)
  bic r0, r0, #0x00002000 @ clear V bit
  mcr p15, 0, r0, c1, c0, 0 @ Write R0 into SCTLR (Write control register configuration data)
  isb
  bx lr

.global ArmEnableVFP ; .section ".text.ArmEnableVFP", "ax" ; .type ArmEnableVFP, %function ; .p2align 2 ; ArmEnableVFP:
  # Read CPACR (Coprocessor Access Control Register)
  mrc p15, 0, r0, c1, c0, 2
  # Enable VPF access (Full Access to CP10, CP11) (V* instructions)
  orr r0, r0, #0x00f00000
  # Write back CPACR (Coprocessor Access Control Register)
  mcr p15, 0, r0, c1, c0, 2
  isb
  # Set EN bit in FPEXC. The Advanced SIMD and VFP extensions are enabled and operate normally.
  mov r0, #0x40000000

  mcr p10,#0x7,r0,c8,c0,#0





  bx lr

.global ArmCallWFI ; .section ".text.ArmCallWFI", "ax" ; .type ArmCallWFI, %function ; .p2align 2 ; ArmCallWFI:
  wfi
  bx lr

#Note: Return 0 in Uniprocessor implementation
.global ArmReadCbar ; .section ".text.ArmReadCbar", "ax" ; .type ArmReadCbar, %function ; .p2align 2 ; ArmReadCbar:
  mrc p15, 4, r0, c15, c0, 0 @ Read Configuration Base Address Register
  bx lr

.global ArmReadMpidr ; .section ".text.ArmReadMpidr", "ax" ; .type ArmReadMpidr, %function ; .p2align 2 ; ArmReadMpidr:
  mrc p15, 0, r0, c0, c0, 5 @ read MPIDR
  bx lr

.global ArmReadTpidrurw ; .section ".text.ArmReadTpidrurw", "ax" ; .type ArmReadTpidrurw, %function ; .p2align 2 ; ArmReadTpidrurw:
  mrc p15, 0, r0, c13, c0, 2 @ read TPIDRURW
  bx lr

.global ArmWriteTpidrurw ; .section ".text.ArmWriteTpidrurw", "ax" ; .type ArmWriteTpidrurw, %function ; .p2align 2 ; ArmWriteTpidrurw:
  mcr p15, 0, r0, c13, c0, 2 @ write TPIDRURW
  bx lr

.global ArmIsArchTimerImplemented ; .section ".text.ArmIsArchTimerImplemented", "ax" ; .type ArmIsArchTimerImplemented, %function ; .p2align 2 ; ArmIsArchTimerImplemented:
  mrc p15, 0, r0, c0, c1, 1 @ Read ID_PFR1
  and r0, r0, #0x000F0000
  bx lr

.global ArmReadIdPfr1 ; .section ".text.ArmReadIdPfr1", "ax" ; .type ArmReadIdPfr1, %function ; .p2align 2 ; ArmReadIdPfr1:
  mrc p15, 0, r0, c0, c1, 1 @ Read ID_PFR1 Register
  bx lr


