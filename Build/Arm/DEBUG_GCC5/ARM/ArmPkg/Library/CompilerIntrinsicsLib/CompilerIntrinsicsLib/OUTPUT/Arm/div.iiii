#------------------------------------------------------------------------------

# Copyright (c) 2011, ARM. All rights reserved.<BR>

# SPDX-License-Identifier: BSD-2-Clause-Patent

#------------------------------------------------------------------------------

.text
.align 2
.global __aeabi_uidiv ; .type __aeabi_uidiv, %function
.global __aeabi_uidivmod ; .type __aeabi_uidivmod, %function
.global __aeabi_idiv ; .type __aeabi_idiv, %function
.global __aeabi_idivmod ; .type __aeabi_idivmod, %function

 # AREA Math, CODE, READONLY


#UINT32
#
 #__aeabi_uidivmode (
# UINT32 Dividen
# UINT32 Divisor
# );


__aeabi_uidiv:
__aeabi_uidivmod:
  rsbs r12, r1, r0, LSR #4
  mov r2, #0
  bcc __arm_div4
  rsbs r12, r1, r0, LSR #8
  bcc __arm_div8
  mov r3, #0
  b __arm_div_large


 #INT32
#
 #__aeabi_idivmode (
# INT32 Dividen
# INT32 Divisor
# );

__aeabi_idiv:
__aeabi_idivmod:
  orrs r12, r0, r1
  bmi __arm_div_negative
  rsbs r12, r1, r0, LSR #1
  mov r2, #0
  bcc __arm_div1
  rsbs r12, r1, r0, LSR #4
  bcc __arm_div4
  rsbs r12, r1, r0, LSR #8
  bcc __arm_div8
  mov r3, #0
  b __arm_div_large
__arm_div8:
  rsbs r12, r1, r0, LSR #7
  subcs r0, r0, r1, LSL #7
  adc r2, r2, r2
  rsbs r12, r1, r0,LSR #6
  subcs r0, r0, r1, LSL #6
  adc r2, r2, r2
  rsbs r12, r1, r0, LSR #5
  subcs r0, r0, r1, LSL #5
  adc r2, r2, r2
  rsbs r12, r1, r0, LSR #4
  subcs r0, r0, r1, LSL #4
  adc r2, r2, r2
__arm_div4:
  rsbs r12, r1, r0, LSR #3
  subcs r0, r0, r1, LSL #3
  adc r2, r2, r2
  rsbs r12, r1, r0, LSR #2
  subcs r0, r0, r1, LSL #2
  adcs r2, r2, r2
  rsbs r12, r1, r0, LSR #1
  subcs r0, r0, r1, LSL #1
  adc r2, r2, r2
__arm_div1:
  subs r1, r0, r1
  movcc r1, r0
  adc r0, r2, r2
  bx r14
__arm_div_negative:
  ands r2, r1, #0x80000000
  rsbmi r1, r1, #0
  eors r3, r2, r0, ASR #32
  rsbcs r0, r0, #0
  rsbs r12, r1, r0, LSR #4
  bcc label1
  rsbs r12, r1, r0, LSR #8
  bcc label2
__arm_div_large:
  lsl r1, r1, #6
  rsbs r12, r1, r0, LSR #8
  orr r2, r2, #0xfc000000
  bcc label2
  lsl r1, r1, #6
  rsbs r12, r1, r0, LSR #8
  orr r2, r2, #0x3f00000
  bcc label2
  lsl r1, r1, #6
  rsbs r12, r1, r0, LSR #8
  orr r2, r2, #0xfc000
  orrcs r2, r2, #0x3f00
  lslcs r1, r1, #6
  rsbs r12, r1, #0
  bcs __aeabi_idiv0
label3:
  lsrcs r1, r1, #6
label2:
  rsbs r12, r1, r0, LSR #7
  subcs r0, r0, r1, LSL #7
  adc r2, r2, r2
  rsbs r12, r1, r0, LSR #6
  subcs r0, r0, r1, LSL #6
  adc r2, r2, r2
  rsbs r12, r1, r0, LSR #5
  subcs r0, r0, r1, LSL #5
  adc r2, r2, r2
  rsbs r12, r1, r0, LSR #4
  subcs r0, r0, r1, LSL #4
  adc r2, r2, r2
label1:
  rsbs r12, r1, r0, LSR #3
  subcs r0, r0, r1, LSL #3
  adc r2, r2, r2
  rsbs r12, r1, r0, LSR #2
  subcs r0, r0, r1, LSL #2
  adcs r2, r2, r2
  bcs label3
  rsbs r12, r1, r0, LSR #1
  subcs r0, r0, r1, LSL #1
  adc r2, r2, r2
  subs r1, r0, r1
  movcc r1, r0
  adc r0, r2, r2
  asrs r3, r3, #31
  rsbmi r0, r0, #0
  rsbcs r1, r1, #0
  bx r14

  @ What to do about division by zero? For now, just return.
__aeabi_idiv0:
  bx r14
