# 1 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmLib/Arm/ArmLibSupport.S"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/xephyr/Documents/edk2/BaseTools/Bin/gcc_arm_linux_extdep/arm-linux-gnueabihf/libc/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h" 1
# 16 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 1
# 22 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h" 1
# 101 "/home/xephyr/Documents/edk2/MdePkg/Include/Arm/ProcessorBind.h"
  typedef unsigned long long UINT64;
  typedef long long INT64;
  typedef unsigned int UINT32;
  typedef int INT32;
  typedef unsigned short UINT16;
  typedef unsigned short CHAR16;
  typedef short INT16;
  typedef unsigned char BOOLEAN;
  typedef unsigned char UINT8;
  typedef char CHAR8;
  typedef signed char INT8;






typedef UINT32 UINTN;





typedef INT32 INTN;
# 23 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h" 2
# 222 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 657 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef __builtin_va_list VA_LIST;
# 742 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 813 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");
# 834 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyUint32EnumValue = 0xffffffff
} __VERIFY_UINT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h" 2
# 1 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 845 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdSetSku (
  UINTN SkuId
  );
# 862 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGet8 (
  UINTN TokenNumber
  );
# 879 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGet16 (
  UINTN TokenNumber
  );
# 896 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGet32 (
  UINTN TokenNumber
  );
# 913 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGet64 (
  UINTN TokenNumber
  );
# 930 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetPtr (
  UINTN TokenNumber
  );
# 947 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetBool (
  UINTN TokenNumber
  );
# 962 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSize (
  UINTN TokenNumber
  );
# 983 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1005 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1024 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1046 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1068 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1090 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1112 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1132 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1151 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1170 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1189 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1218 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1238 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1261 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1285 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1309 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1333 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1363 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1388 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1412 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
( *PCD_CALLBACK)(
  const GUID *CallBackGuid,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1438 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCallbackOnSet (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1460 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCancelCallback (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1488 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetNextToken (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1510 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *

LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1540 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1572 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1606 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1641 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1693 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1713 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1728 "/home/xephyr/Documents/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSku (
  void
  );
# 18 "/home/xephyr/Documents/edk2/Build/Arm/DEBUG_GCC5/ARM/ArmPkg/Library/ArmLib/ArmBaseLib/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern GUID gArmTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const BOOLEAN _gPcd_FixedAtBuild_PcdNormalMemoryNonshareableOverride;
# 1 "<command-line>" 2
# 1 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmLib/Arm/ArmLibSupport.S"
#------------------------------------------------------------------------------

# Copyright (c) 2008 - 2009, Apple Inc. All rights reserved.<BR>
# Copyright (c) 2011 - 2016, ARM Limited. All rights reserved.
# Copyright (c) 2016, Linaro Limited. All rights reserved.

# SPDX-License-Identifier: BSD-2-Clause-Patent

#------------------------------------------------------------------------------

# 1 "/home/xephyr/Documents/edk2/ArmPkg/Include/AsmMacroIoLib.h" 1
# 12 "/home/xephyr/Documents/edk2/ArmPkg/Library/ArmLib/Arm/ArmLibSupport.S" 2

.global ArmReadMidr ; .section ".text.ArmReadMidr", "ax" ; .type ArmReadMidr, %function ; .p2align 2 ; ArmReadMidr:
  mrc p15,0,R0,c0,c0,0
  bx LR

.global ArmCacheInfo ; .section ".text.ArmCacheInfo", "ax" ; .type ArmCacheInfo, %function ; .p2align 2 ; ArmCacheInfo:
  mrc p15,0,R0,c0,c0,1
  bx LR

.global ArmGetInterruptState ; .section ".text.ArmGetInterruptState", "ax" ; .type ArmGetInterruptState, %function ; .p2align 2 ; ArmGetInterruptState:
  mrs R0,CPSR
  tst R0,#0x80 @Check if IRQ is enabled.
  moveq R0,#1
  movne R0,#0
  bx LR

.global ArmGetFiqState ; .section ".text.ArmGetFiqState", "ax" ; .type ArmGetFiqState, %function ; .p2align 2 ; ArmGetFiqState:
  mrs R0,CPSR
  tst R0,#0x40 @Check if FIQ is enabled.
  moveq R0,#1
  movne R0,#0
  bx LR

.global ArmSetDomainAccessControl ; .section ".text.ArmSetDomainAccessControl", "ax" ; .type ArmSetDomainAccessControl, %function ; .p2align 2 ; ArmSetDomainAccessControl:
  mcr p15,0,r0,c3,c0,0
  bx lr

.global CPSRMaskInsert ; .section ".text.CPSRMaskInsert", "ax" ; .type CPSRMaskInsert, %function ; .p2align 2 ; CPSRMaskInsert: @ on entry, r0 is the mask and r1 is the field to insert
  stmfd sp!, {r4-r12, lr} @ save all the banked registers
  mov r3, sp @ copy the stack pointer into a non-banked register
  mrs r2, cpsr @ read the cpsr
  bic r2, r2, r0 @ clear mask in the cpsr
  and r1, r1, r0 @ clear bits outside the mask in the input
  orr r2, r2, r1 @ set field
  msr cpsr_cxsf, r2 @ write back cpsr (may have caused a mode switch)
  isb
  mov sp, r3 @ restore stack pointer
  ldmfd sp!, {r4-r12, lr} @ restore registers
  bx lr @ return (hopefully thumb-safe!)

.global CPSRRead ; .section ".text.CPSRRead", "ax" ; .type CPSRRead, %function ; .p2align 2 ; CPSRRead:
  mrs r0, cpsr
  bx lr

.global ArmReadCpacr ; .section ".text.ArmReadCpacr", "ax" ; .type ArmReadCpacr, %function ; .p2align 2 ; ArmReadCpacr:
  mrc p15, 0, r0, c1, c0, 2
  bx lr

.global ArmWriteCpacr ; .section ".text.ArmWriteCpacr", "ax" ; .type ArmWriteCpacr, %function ; .p2align 2 ; ArmWriteCpacr:
  mcr p15, 0, r0, c1, c0, 2
  isb
  bx lr

.global ArmWriteAuxCr ; .section ".text.ArmWriteAuxCr", "ax" ; .type ArmWriteAuxCr, %function ; .p2align 2 ; ArmWriteAuxCr:
  mcr p15, 0, r0, c1, c0, 1
  bx lr

.global ArmReadAuxCr ; .section ".text.ArmReadAuxCr", "ax" ; .type ArmReadAuxCr, %function ; .p2align 2 ; ArmReadAuxCr:
  mrc p15, 0, r0, c1, c0, 1
  bx lr

.global ArmSetTTBR0 ; .section ".text.ArmSetTTBR0", "ax" ; .type ArmSetTTBR0, %function ; .p2align 2 ; ArmSetTTBR0:
  mcr p15,0,r0,c2,c0,0
  isb
  bx lr

.global ArmSetTTBCR ; .section ".text.ArmSetTTBCR", "ax" ; .type ArmSetTTBCR, %function ; .p2align 2 ; ArmSetTTBCR:
  mcr p15, 0, r0, c2, c0, 2
  isb
  bx lr

.global ArmGetTTBR0BaseAddress ; .section ".text.ArmGetTTBR0BaseAddress", "ax" ; .type ArmGetTTBR0BaseAddress, %function ; .p2align 2 ; ArmGetTTBR0BaseAddress:
  mrc p15,0,r0,c2,c0,0
  movw r1, #(0xFFFFC000) & 0xffff ; movt r1, #(0xFFFFC000) >> 16
  and r0, r0, r1
  isb
  bx lr







.global ArmUpdateTranslationTableEntry ; .section ".text.ArmUpdateTranslationTableEntry", "ax" ; .type ArmUpdateTranslationTableEntry, %function ; .p2align 2 ; ArmUpdateTranslationTableEntry:
  mcr p15,0,R1,c8,c7,1 @ TLBIMVA TLB Invalidate MVA
  mcr p15,0,R9,c7,c5,6 @ BPIALL Invalidate Branch predictor array. R9 == NoOp
  dsb
  isb
  bx lr

.global ArmInvalidateTlb ; .section ".text.ArmInvalidateTlb", "ax" ; .type ArmInvalidateTlb, %function ; .p2align 2 ; ArmInvalidateTlb:
  mov r0,#0
  mcr p15,0,r0,c8,c7,0
  mcr p15,0,R9,c7,c5,6 @ BPIALL Invalidate Branch predictor array. R9 == NoOp
  dsb
  isb
  bx lr

.global ArmReadScr ; .section ".text.ArmReadScr", "ax" ; .type ArmReadScr, %function ; .p2align 2 ; ArmReadScr:
  mrc p15, 0, r0, c1, c1, 0
  bx lr

.global ArmWriteScr ; .section ".text.ArmWriteScr", "ax" ; .type ArmWriteScr, %function ; .p2align 2 ; ArmWriteScr:
  mcr p15, 0, r0, c1, c1, 0
  isb
  bx lr

.global ArmReadHVBar ; .section ".text.ArmReadHVBar", "ax" ; .type ArmReadHVBar, %function ; .p2align 2 ; ArmReadHVBar:
  mrc p15, 4, r0, c12, c0, 0
  bx lr

.global ArmWriteHVBar ; .section ".text.ArmWriteHVBar", "ax" ; .type ArmWriteHVBar, %function ; .p2align 2 ; ArmWriteHVBar:
  mcr p15, 4, r0, c12, c0, 0
  bx lr

.global ArmReadMVBar ; .section ".text.ArmReadMVBar", "ax" ; .type ArmReadMVBar, %function ; .p2align 2 ; ArmReadMVBar:
  mrc p15, 0, r0, c12, c0, 1
  bx lr

.global ArmWriteMVBar ; .section ".text.ArmWriteMVBar", "ax" ; .type ArmWriteMVBar, %function ; .p2align 2 ; ArmWriteMVBar:
  mcr p15, 0, r0, c12, c0, 1
  bx lr

.global ArmCallWFE ; .section ".text.ArmCallWFE", "ax" ; .type ArmCallWFE, %function ; .p2align 2 ; ArmCallWFE:
  wfe
  bx lr

.global ArmCallSEV ; .section ".text.ArmCallSEV", "ax" ; .type ArmCallSEV, %function ; .p2align 2 ; ArmCallSEV:
  sev
  bx lr

.global ArmReadSctlr ; .section ".text.ArmReadSctlr", "ax" ; .type ArmReadSctlr, %function ; .p2align 2 ; ArmReadSctlr:
  mrc p15, 0, r0, c1, c0, 0 @ Read SCTLR into R0 (Read control register configuration data)
  bx lr

.global ArmWriteSctlr ; .section ".text.ArmWriteSctlr", "ax" ; .type ArmWriteSctlr, %function ; .p2align 2 ; ArmWriteSctlr:
  mcr p15, 0, r0, c1, c0, 0
  bx lr

.global ArmReadCpuActlr ; .section ".text.ArmReadCpuActlr", "ax" ; .type ArmReadCpuActlr, %function ; .p2align 2 ; ArmReadCpuActlr:
  mrc p15, 0, r0, c1, c0, 1
  bx lr

.global ArmWriteCpuActlr ; .section ".text.ArmWriteCpuActlr", "ax" ; .type ArmWriteCpuActlr, %function ; .p2align 2 ; ArmWriteCpuActlr:
  mcr p15, 0, r0, c1, c0, 1
  dsb
  isb
  bx lr

.global ArmGetPhysicalAddressBits ; .section ".text.ArmGetPhysicalAddressBits", "ax" ; .type ArmGetPhysicalAddressBits, %function ; .p2align 2 ; ArmGetPhysicalAddressBits:
  mrc p15, 0, r0, c0, c1, 4
  and r0, r0, #0xf
  cmp r0, #5
  movlt r0, #32
  movge r0, #40
  bx lr


