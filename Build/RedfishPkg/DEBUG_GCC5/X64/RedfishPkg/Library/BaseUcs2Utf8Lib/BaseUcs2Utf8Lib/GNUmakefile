#
# DO NOT EDIT
# This file is auto-generated by build utility
#
# Module Name:
#
#   GNUmakefile
#
# Abstract:
#
#   Auto-generated makefile for building modules, libraries or platform
#
    

#
# Platform Macro Definition
#
PLATFORM_NAME = RedfishPkg
PLATFORM_GUID = c4352870-5232-11e7-9522-005056c00008
PLATFORM_VERSION = 1.0
PLATFORM_RELATIVE_DIR = RedfishPkg
PLATFORM_DIR = /home/xephyr/Documents/edk2/RedfishPkg
PLATFORM_OUTPUT_DIR = Build/RedfishPkg

#
# Module Macro Definition
#
MODULE_NAME = BaseUcs2Utf8Lib
MODULE_GUID = 536646C3-46D0-4B12-ABC4-CDE1A33B5256
MODULE_NAME_GUID = BaseUcs2Utf8Lib
MODULE_VERSION = 1.0
MODULE_TYPE = BASE
MODULE_FILE = BaseUcs2Utf8Lib.inf
MODULE_FILE_BASE_NAME = BaseUcs2Utf8Lib
BASE_NAME = $(MODULE_NAME)
MODULE_RELATIVE_DIR = RedfishPkg/Library/BaseUcs2Utf8Lib
PACKAGE_RELATIVE_DIR = Library/BaseUcs2Utf8Lib
MODULE_DIR = /home/xephyr/Documents/edk2/RedfishPkg/Library/BaseUcs2Utf8Lib
FFS_OUTPUT_DIR = 

MODULE_ENTRY_POINT = _ModuleEntryPoint
ARCH_ENTRY_POINT = _ModuleEntryPoint
IMAGE_ENTRY_POINT = _ModuleEntryPoint

INF_VERSION = 0x0001001b
BASE_NAME = BaseUcs2Utf8Lib
FILE_GUID = 536646C3-46D0-4B12-ABC4-CDE1A33B5256
MODULE_TYPE = BASE
VERSION_STRING = 1.0

#
# Build Configuration Macro Definition
#
ARCH = X64
TOOLCHAIN = GCC5
TOOLCHAIN_TAG = GCC5
TARGET = DEBUG

#
# Build Directory Macro Definition
#
# PLATFORM_BUILD_DIR = /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5
BUILD_DIR = /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5
BIN_DIR = $(BUILD_DIR)/X64
LIB_DIR = $(BIN_DIR)
MODULE_BUILD_DIR = /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib
OUTPUT_DIR = /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib/OUTPUT
DEBUG_DIR = /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib/DEBUG
DEST_DIR_OUTPUT = $(OUTPUT_DIR)
DEST_DIR_DEBUG = $(DEBUG_DIR)

#
# Shell Command Macro
#
CP = cp -f
MV = mv -f
RM = rm -f
MD = mkdir -p
RD = rm -r -f


#
# Tools definitions specific to this module
#
ASMLINK = bin16\link16.exe
ASMLINK_FLAGS = /nologo /tiny


OPTROM = EfiRom
OPTROM_FLAGS = -e


DTC_FLAGS = -H epapr
DTC = dtc

APP_FLAGS = 

OBJCOPY_ADDDEBUGFLAG =  --add-gnu-debuglink=$(DEBUG_DIR)/$(MODULE_NAME).debug
OBJCOPY = objcopy
OBJCOPY_FLAGS = 


ASL = iasl
ASL_FLAGS = 
ASL_OUTFLAGS =  -p

GENFW = GenFw
GENFW_FLAGS = 

ASLDLINK = gcc
ASLDLINK_FLAGS = -nostdlib -Wl,-n,-q,--gc-sections -z common-page-size=0x40 -Wl,--defsym=PECOFF_HEADER_SIZE=0 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds -Wl,--entry,ReferenceAcpiTable -u ReferenceAcpiTable -Wl,-m,elf_x86_64

BROTLI = BrotliCompress
BROTLI_GUID =  3D532050-5CDA-4FD0-879E-0F7F630D5AFB


LZMAF86 = LzmaF86Compress
LZMAF86_GUID =  D42AE6BD-1352-4bfb-909A-CA72A6EAE889

CRC32 = GenCrc32
CRC32_GUID =  FC1BCDB0-7D31-49AA-936A-A4600D9DD083

ASM = gcc
ASM_FLAGS = -c -x assembler -imacros AutoGen.h -m64

SLINK = gcc-ar


RSA2048SHA256SIGN = Rsa2048Sha256Sign
RSA2048SHA256SIGN_GUID =  A7717414-C616-4977-9420-844712A735BF


RC = objcopy
RC_FLAGS = -I binary -O elf64-x86-64 -B i386 --rename-section .data=.hii

SYMRENAME = echo
SYMRENAME_FLAGS = Symbol renaming not needed for

DTCPP = cpp

NASM_FLAGS = -f elf64
NASM = nasm

DEPS_FLAGS = -MMD -MF $@.deps

PKCS7SIGN = Pkcs7Sign
PKCS7SIGN_GUID =  4AAFD29D-68DF-49EE-8AA9-347D375665A7



ASLPP = gcc
ASLPP_FLAGS = -x c -E -include AutoGen.h


ASLCC = gcc
ASLCC_FLAGS = -x c -fno-lto -m64

CC_FLAGS = -g -Os -fshort-wchar -fno-builtin -fno-strict-aliasing -Wall -Werror -Wno-array-bounds -include AutoGen.h -fno-common -ffunction-sections -fdata-sections -DSTRING_ARRAY_NAME=$(BASE_NAME)Strings -m64 -fno-stack-protector "-DEFIAPI=__attribute__((ms_abi))" -maccumulate-outgoing-args -mno-red-zone -Wno-address -mcmodel=small -fpie -fno-asynchronous-unwind-tables -Wno-address -flto -DUSING_LTO -Os
CC = gcc



PP = gcc
PP_FLAGS = -E -x assembler-with-cpp -include AutoGen.h -DOPENSBI_EXTERNAL_SBI_TYPES=OpensbiTypes.h

VFRPP = gcc
VFRPP_FLAGS = -x c -E -P -DVFRCOMPILE --include $(MODULE_NAME)StrDefs.h

TIANO = TianoCompress
TIANO_GUID =  A31280AD-481E-41B6-95E8-127F4C984779

VFR = VfrCompile
VFR_FLAGS = -l -n



DLINK2_FLAGS = -Wl,--defsym=PECOFF_HEADER_SIZE=0x228 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds -Wno-error

MAKE = make



DLINK_FLAGS = -nostdlib -Wl,-n,-q,--gc-sections -z common-page-size=0x40 -Wl,--entry,$(IMAGE_ENTRY_POINT) -u $(IMAGE_ENTRY_POINT) -Wl,-Map,$(DEST_DIR_DEBUG)/$(BASE_NAME).map,--whole-archive -Wl,-melf_x86_64,--oformat=elf64-x86-64,-pie -flto -Os
DLINK = gcc

LZMA = LzmaCompress
LZMA_GUID =  EE4E5898-3914-4259-9D6E-DC7BD79403CF

NASMB_FLAGS = -f bin

VPDTOOL = BPDG
VPDTOOL_GUID =  8C3D856A-9BE6-468E-850A-24F7A8D38E08


MAKE_FILE = $(MODULE_BUILD_DIR)/GNUmakefile

#
# Build Macro
#
OBJECT_FILES =  \
    $(OUTPUT_DIR)/BaseUcs2Utf8Lib.obj

INC =  \
    -I$(WORKSPACE)/RedfishPkg/Library/BaseUcs2Utf8Lib \
    -I$(DEBUG_DIR) \
    -I$(WORKSPACE)/MdePkg \
    -I$(WORKSPACE)/MdePkg/Include \
    -I$(WORKSPACE)/MdePkg/Test/UnitTest/Include \
    -I$(WORKSPACE)/MdePkg/Include/X64 \
    -I$(WORKSPACE)/MdeModulePkg \
    -I$(WORKSPACE)/MdeModulePkg/Include \
    -I$(WORKSPACE)/RedfishPkg \
    -I$(WORKSPACE)/RedfishPkg/Include \
    -I$(WORKSPACE)/RedfishPkg/PrivateInclude \
    -I$(WORKSPACE)/RedfishPkg/PrivateInclude/Crt \
    -I$(WORKSPACE)/RedfishPkg/Library/JsonLib \
    -I$(WORKSPACE)/RedfishPkg/Library/JsonLib/jansson/src

OBJECT_FILES_LIST = /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib/OUTPUT/object_files.lst


#
# Overridable Target Macro Definitions
#
FORCE_REBUILD = force_build
INIT_TARGET = init
PCH_TARGET =
BC_TARGET = 
CODA_TARGET = /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib/OUTPUT/BaseUcs2Utf8Lib.lib \
              

#
# Default target, which will build dependent libraries in addition to source files
#

all: mbuild


#
# Target used when called from platform makefile, which will bypass the build of dependent libraries
#

pbuild: $(INIT_TARGET) $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# ModuleTarget
#

mbuild: $(INIT_TARGET) $(BC_TARGET) gen_libs $(PCH_TARGET) $(CODA_TARGET)

#
# Build Target used in multi-thread build mode, which will bypass the init and gen_libs targets
#

tbuild: $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# Phony target which is used to force executing commands for a target
#
force_build:
	-@

#
# Target to update the FD
#

fds: mbuild gen_fds

#
# Initialization target: print build information and create necessary directories
#
init: info dirs

info:
	-@echo Building ... $(MODULE_DIR)/$(MODULE_FILE) [$(ARCH)]

dirs:
	-@$(MD) $(DEBUG_DIR)
	-@$(MD) $(OUTPUT_DIR)


strdefs:
	-@$(CP) $(DEBUG_DIR)/AutoGen.h $(DEBUG_DIR)/$(MODULE_NAME)StrDefs.h

#
# GenLibsTarget
#
gen_libs:
	@cd $(MODULE_BUILD_DIR)

#
# Build Flash Device Image
#
gen_fds:
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BUILD_DIR)/GNUmakefile fds
	@cd $(MODULE_BUILD_DIR)

include $(MODULE_BUILD_DIR)/dependency
include $(MODULE_BUILD_DIR)/deps_target

#
# Individual Object Build Targets
#
$(OUTPUT_DIR)/BaseUcs2Utf8Lib.obj : $(MAKE_FILE)
$(OUTPUT_DIR)/BaseUcs2Utf8Lib.obj : $(DEBUG_DIR)/AutoGen.h
$(OUTPUT_DIR)/BaseUcs2Utf8Lib.obj : $(WORKSPACE)/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib.c
	"$(CC)" $(DEPS_FLAGS) $(CC_FLAGS) -c -o /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib/OUTPUT/./BaseUcs2Utf8Lib.obj $(INC) /home/xephyr/Documents/edk2/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib.c

$(OUTPUT_DIR)/BaseUcs2Utf8Lib.lib : $(OBJECT_FILES)
$(OUTPUT_DIR)/BaseUcs2Utf8Lib.lib : $(OBJECT_FILES_LIST)
	$(RM) /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib/OUTPUT/BaseUcs2Utf8Lib.lib
	"$(SLINK)" cr /home/xephyr/Documents/edk2/Build/RedfishPkg/DEBUG_GCC5/X64/RedfishPkg/Library/BaseUcs2Utf8Lib/BaseUcs2Utf8Lib/OUTPUT/BaseUcs2Utf8Lib.lib $(SLINK_FLAGS) @$(OBJECT_FILES_LIST)



#
# clean all intermediate files
#
clean:
	$(RD) $(OUTPUT_DIR)
		$(RM) AutoGenTimeStamp

#
# clean all generated files
#
cleanall:
	$(RD) $(DEBUG_DIR)
	$(RD) $(OUTPUT_DIR)
	$(RM) *.pdb *.idb > NUL 2>&1
	$(RM) $(BIN_DIR)/$(MODULE_NAME).efi
	$(RM) AutoGenTimeStamp

#
# clean all dependent libraries built
#
cleanlib:
	@cd $(MODULE_BUILD_DIR)

